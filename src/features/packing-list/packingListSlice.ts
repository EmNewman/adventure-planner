import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
// import { fetchCount } from './counterAPI';
import { Item } from '../../types/types';
import { tempItemList } from '../../demodata/demodata';

export interface CounterState {
  itemList: Array<Item>, // All items possible
  checkedItems: Array<string>, // List of items checked

}

const initialState: CounterState = {
  itemList: tempItemList,
  checkedItems: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const packingListSlice = createSlice({
  name: 'packing-list',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    toggleCheckedItem: (state, action: PayloadAction<Item>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const currentIndex = state.checkedItems.indexOf(action.payload.name);
      // const newChecked = [...state.checkedItems];

      if (currentIndex === -1) {
        state.checkedItems.push(action.payload.name);
      } else {
        state.checkedItems.splice(currentIndex, 1);
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const { toggleCheckedItem } = packingListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectItemList = (state: RootState) => state.packingList.itemList;
export const selectCheckedItems = (state: RootState) => state.packingList.checkedItems;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default packingListSlice.reducer;